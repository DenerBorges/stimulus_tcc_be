// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  user             String     @db.VarChar(255)
  birthdate        String     @db.VarChar(255)
  email            String     @unique @db.VarChar(255)
  password         String     @db.VarChar(255)
  resetCode        String?
  resetCodeExpires DateTime?
  profilePic       String?
  mobile           String?    @db.VarChar(255)
  document         String?    @db.VarChar(255)
  zipCode          String?    @db.VarChar(255)
  street           String?    @db.VarChar(255)
  number           String?    @db.VarChar(255)
  complement       String?    @db.VarChar(255)
  neighborhood     String?    @db.VarChar(255)
  city             String?    @db.VarChar(255)
  state            String?    @db.Char(2)
  isAdmin          Boolean    @default(false) @db.Boolean
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  project          Project[]
  comment          Comment[]
  donation         Donation[]
}

model Project {
  id             Int        @id @default(autoincrement())
  name           String     @db.VarChar(255)
  description    String     @db.VarChar(255)
  category       String     @db.VarChar(255)
  total          Decimal    @db.Decimal(10, 2)
  goal           Decimal    @db.Decimal(10, 2)
  deadline       Int        @db.Integer
  report         Int        @default(0) @db.Integer
  reportMessages String[]   @default([])
  visible        Boolean    @default(true) @db.Boolean
  image          String[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  User           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  comment        Comment[]
  reward         Reward[]
  donation       Donation[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String   @db.VarChar(255)
  user      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Reward {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String     @db.VarChar(255)
  value       Decimal    @db.Decimal(10, 2)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  donation    Donation[]
}

model Donation {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  value     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reward    Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  rewardId  Int
}
